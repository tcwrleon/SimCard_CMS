<?xml version="1.0" encoding="UTF-8"?>
<beans:beans xmlns="http://www.springframework.org/schema/security"
	xmlns:beans="http://www.springframework.org/schema/beans" 
	xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
	xsi:schemaLocation="http://www.springframework.org/schema/beans 
	http://www.springframework.org/schema/beans/spring-beans-3.0.xsd 
	http://www.springframework.org/schema/security 
	http://www.springframework.org/schema/security/spring-security-3.1.xsd">

    <!-- 开发环境可以放置 <debug /> 配置，会输出详细Security处理日志，正式环境建议屏蔽 <debug /> 配置 -->
    <!-- <debug /> -->
    <!-- 该路径下的资源不用过滤 -->
    <http pattern="/index.jsp" security="none" />
    <http pattern="/denied.jsp" security="none" />
    <http pattern="/test.jsp" security="none" /> <!-- 测试用的，以后要去掉  -->
    <http pattern="/loginAction_goToLoginPage" security="none" />
	<http pattern="/loginAction_successToMainByPost" security="none" />
    <http pattern="/images/**" security="none"/>
    <http pattern="/javascript/**" security="none"/>
    <http pattern="/style/**" security="none"/>
    <http pattern="/themes/**" security="none"/>
	<http pattern="/platInfoAction_toQuery" security="none" />
	<http pattern="/platInfoAction_toDetail" security="none" />
	<http pattern="/shareholderInfoAction_toQuery" security="none" />
	<http pattern="/shareholderInfoAction_toDetail" security="none" />
	<http pattern="/shareholderInfoAction_getPlatInfo" security="none" />
	<http pattern="/shareholderInfoAction_write" security="none" />
	<http pattern="/platAccountInfoAction_toQuery" security="none" />
	<http pattern="/platAccountInfoAction_toDetail" security="none" />
	<http pattern="/paymentKeyAction_*" security="none" />
     
	<!--
		use-expressions="true" 的意思是开启表达式
		access-denied-page的意思是，当验证权限失败后会跳转到的页面
		entry-point-ref： ExceptionTranslationFilter，为了捕获spring security的错误入口
	-->
	<http use-expressions="true" auto-config="false" entry-point-ref="myAuthenticationEntryPoint" access-denied-page="/denied.jsp">

        <!-- 
        	logout-url 属性:这个指定的URL会触发注销操作，默认是 /j_spring_security_logout
        	invalidate-session 属性：如果为true，在注销的时候会销毁会话
        	delete-cookies 属性：以逗号分隔的cookies名称，在用户注销时删除指定的cookies
        -->
        <logout logout-success-url="/loginAction_goToLoginPage" logout-url="/loginAction_logout" invalidate-session="true" delete-cookies="JSESSIONID"/>
        
        <!--session超时跳转页面 以及每用户可拥有的session最大个数 -->
        <!-- 会话管理 -->
		<session-management invalid-session-url="/loginAction_goToLoginPage" session-fixation-protection="none">
			<concurrency-control max-sessions="1" error-if-maximum-exceeded="true" />
		</session-management>
		
		<!--  认证和授权 -->
		<!-- 项目使用了自定义登录处理，如果使用security的登录处理，请去掉以下注释 -->
        <custom-filter ref="myLoginFilter" position="FORM_LOGIN_FILTER"  />
     
     	<!--  
	     	Spring Sercurity要从数据库中获取用户、权限、资源来实现权限管理，需要自定义过滤器，
		     　	并且该过滤器必须在spring Security执行FILTER_SECURITY_INTERCEPTOR过滤器之前执行，
		    　	 因为该框架实现权限管理实质就是在执行action之前先执行它框架中的为权限管理制定的一系列Fliter。
		　　	我们自定的这个SercurityFilter类要继承AbstractSecurityInterceptor 接口和Filter类（负责传递一系列的Filter）,
		　　	因为我们是从数据库中获取权限验证的数据，所以还要重写FilterInvocationSecurityMetadataSource 接口，
			AccessDecisionManager 接口，UserDetailsService 接口，只要重写了这3个接口，
			然后再spring配置文件中做相应的配置，项目启动启动后，我们进行资源请求，就自动会去执行我们重定义的类进行权限判断。
       -->
       
       <!--
			在http标签下配置一个我们自定义的继承了org.springframework.security.access.intercept.AbstractSecurityInterceptor的Filter，并注入其
			必须的3个组件authenticationManager、accessDecisionManager和securityMetadataSource。其作用上面已经注释了。
			这里的FILTER_SECURITY_INTERCEPTOR是Spring Security默认的Filter，
			我们自定义的Filter必须在它之前，过滤请求
		-->
        <custom-filter ref="mySecurityFilter" before="FILTER_SECURITY_INTERCEPTOR"/>
	</http>
		
 	<!-- 未登录的切入点 -->
    <beans:bean id="myAuthenticationEntryPoint" class="org.springframework.security.web.authentication.LoginUrlAuthenticationEntryPoint">
        <beans:property name="loginFormUrl" value="/loginAction_goToLoginPage"></beans:property>
    </beans:bean>
    
    <!-- 
    	登录验证器：用户有没有登录的资格 
    	init-method="init" 初始化方法
    	项目使用了自定义登录处理，如果使用security的登录处理，请去掉以下注释
    -->
	<beans:bean id="myLoginFilter" init-method="init" class="com.sunyard.security.MyAuthenticationFilter">
		<beans:property name="authenticationManager" ref="myAuthenticationManager" />
		<!-- 验证成功后要跳转的URL -->
		<beans:property name="successUrl" value="/loginAction_successToMain" />
		<!-- 验证失败后要跳转的URL -->
		<beans:property name="errorUrl" value="/loginAction_errorToLogin" />
	</beans:bean>
	
    <!-- 
    	实现了UserDetailsService的Bean 用户拥有的角色：登录后取得用户所保有的角色信息
    	hideUserNotFoundExceptions 登录异常抛出，而不是默认是true总抛坏的凭证
    	passwordEncoder密码加密，配置密钥
    -->
	<authentication-manager alias="myAuthenticationManager">
		<authentication-provider ref="authenticationProvider" />
	</authentication-manager>

	<beans:bean id="authenticationProvider" class="org.springframework.security.authentication.dao.DaoAuthenticationProvider">
		<beans:property name="userDetailsService" ref="myUserDetailServiceImpl"></beans:property>
		<beans:property name="hideUserNotFoundExceptions" value="false"></beans:property>
		<beans:property name="passwordEncoder" ref="passwordEncoder"></beans:property>
	</beans:bean> 
		
	<beans:bean id="passwordEncoder" class="org.springframework.security.crypto.password.StandardPasswordEncoder">
		<beans:constructor-arg index="0" value="sunyard"></beans:constructor-arg> <!-- 密钥 -->
	</beans:bean>
	
</beans:beans>